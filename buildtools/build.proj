<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0"
    DefaultTargets="full-build"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	
  <ItemGroup>  
    <DeploymentNuGetConfig Include="NuGet.Config"/>  
  </ItemGroup>  	

  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
	<PackCommand>dotnet pack --no-build -c $(Configuration) -o ../../../Deployment/nuget-packages</PackCommand>

	<SignAssembly Condition=" '$(SignAssembly)' == '' ">true</SignAssembly>
    <AssemblyOriginatorKeyFile Condition=" '$(AssemblyOriginatorKeyFile)' == '' ">$(MSBuildThisFileDirectory)local-development.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>
  
  


  <Target Name="full-build" DependsOnTargets="full-build-notests;run-tests;test-lambda-test-tool">

  </Target>
  
  <Target Name="full-build-notests" DependsOnTargets="test-blueprints-dotnetnew;package-blueprints;run-tests;build-nuget-packages;copy-awslambdapscore-module;build-lambda-test-tool-package">

  </Target>  
  
  <Target Name="copy-awslambdapscore-module" DependsOnTargets="init">
  
    <ItemGroup>
      <AWSLambdaPSCoreModuleFiles Include="$(MSBuildThisFileDirectory)../PowerShell/Module/**" /> 
    </ItemGroup>
  
	<Copy  
            SourceFiles="@(AWSLambdaPSCoreModuleFiles)"  
            DestinationFolder="../Deployment/PowerShell/AWSLambdaPSCore/%(RecursiveDir)"  
        />	
  </Target>



  <Target Name="init" DependsOnTargets="">

    <RemoveDir Directories="../Deployment"/>
    <MakeDir Directories="../Deployment/nuget-packages"/>
	<MakeDir Directories="../Deployment/PowerShell"/>
	<MakeDir Directories="../Deployment/PowerShell/AWSLambdaPSCore"/>
	
	<Copy  
            SourceFiles="@(DeploymentNuGetConfig)"  
            DestinationFolder="../Deployment"  
        />
	

    <Exec Command="dotnet restore Libraries.sln"
      WorkingDirectory="..\Libraries"/>
    <Exec Command="dotnet restore aws-lambda-test-tool.sln"
      WorkingDirectory="..\Tools\LambdaTestTool"/>
    <Exec Command="dotnet restore BlueprintPackager.sln"
      WorkingDirectory="..\Blueprints\BlueprintPackager"/>
  </Target>

  <Target Name="package-blueprints" DependsOnTargets="init">
    <Exec Command="dotnet run"
      WorkingDirectory="..\Blueprints\BlueprintPackager"/>

    <Exec Command="$(MSBuildThisFileDirectory)nuget.exe pack template.nuspec -OutputDirectory ../../../Deployment/nuget-packages"
      WorkingDirectory="../Blueprints/BlueprintDefinitions/Msbuild-NETCore_2_1"/>
  </Target>

  
  <!-- package-blueprints;build-nuget-packages -->
  <Target Name="test-blueprints-dotnetnew" DependsOnTargets="package-blueprints;build-nuget-packages">
  
    <RemoveDir Directories="../Deployment/BlueprintGenerationTests/DotnetNew"/>
    <MakeDir Directories="../Deployment/BlueprintGenerationTests/DotnetNew"/>	
  
	<Exec Command="dotnet new -i Blueprints\BlueprintDefinitions\Msbuild-NETCore_2_1"
		WorkingDirectory="..\"/>  
		
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=lambda.SimpleApplicationLoadBalancerFunction;ProjectName=SimpleApplicationLoadBalancerFunctionC;Lang=C#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=lambda.DetectImageLabels;ProjectName=DetectImageLabelsC;Lang=C#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=lambda.DetectImageLabels;ProjectName=DetectImageLabelsF;Lang=F#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=serverless.DetectImageLabels;ProjectName=DetectImageLabelsServerlessC;Lang=C#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=serverless.DetectImageLabels;ProjectName=DetectImageLabelsServerlessF;Lang=F#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=lambda.EmptyFunction;ProjectName=EmptyFunctionC;Lang=C#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=lambda.EmptyFunction;ProjectName=EmptyFunctionF;Lang=F#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=lambda.DynamoDB;ProjectName=DynamoDBFunctionC;Lang=C#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=lambda.DynamoDB;ProjectName=DynamoDBFunctionF;Lang=F#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=lambda.Kinesis;ProjectName=KinesisFunctionC;Lang=C#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=lambda.Kinesis;ProjectName=KinesisFunctionF;Lang=F#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=lambda.KinesisFirehose;ProjectName=KinesisFirehoseFunctionC;Lang=C#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=lambda.S3;ProjectName=S3FunctionC;Lang=C#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=lambda.S3;ProjectName=S3FunctionF;Lang=F#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=serverless.S3;ProjectName=S3FunctionServerlessC;Lang=C#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=serverless.S3;ProjectName=S3FunctionServerlessF;Lang=F#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=lambda.SQS;ProjectName=SQSFunctionC;Lang=C#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=serverless.AspNetCoreWebAPI;ProjectName=AspNetCoreWebAPIC;Lang=C#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=serverless.AspNetCoreWebAPI;ProjectName=AspNetCoreWebAPIF;Lang=F#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=serverless.DynamoDBBlogAPI;ProjectName=DynamoDBBlogAPIC;Lang=C#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=serverless.EmptyServerless;ProjectName=EmptyServerlessC;Lang=C#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=serverless.EmptyServerless;ProjectName=EmptyServerlessF;Lang=F#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=serverless.Giraffe;ProjectName=GiraffeF;Lang=F#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=lambda.LexBookTripSample;ProjectName=LexBookTripSampleC;Lang=C#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=lambda.OrderFlowersChatbot;ProjectName=OrderFlowersChatbotC;Lang=C#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=serverless.StepFunctionsHelloWorld;ProjectName=StepFunctionsHelloWorldC;Lang=C#"/>		  
    <MSBuild
          Projects="$(MSBuildProjectFile)"
          Targets="run-blueprint-dotnetnew"
          Properties="TemplateName=serverless.StepFunctionsHelloWorld;ProjectName=StepFunctionsHelloWorldF;Lang=F#"/>		  
	  		
  </Target>
  
  <Target Name="run-blueprint-dotnetnew" DependsOnTargets="">


    <Exec Command="dotnet new $(TemplateName) -lang $(Lang) -n $(ProjectName) --profile default --region us-east-1"
      WorkingDirectory="../Deployment/BlueprintGenerationTests/DotnetNew/"/>
	  
    <Exec Command="dotnet restore"
      WorkingDirectory="../Deployment/BlueprintGenerationTests/DotnetNew/$(ProjectName)/src/$(ProjectName)"/>

    <Exec Command="dotnet restore"
      WorkingDirectory="../Deployment/BlueprintGenerationTests/DotnetNew/$(ProjectName)/Test/$(ProjectName).Tests"/>
	  
    <Exec Command="dotnet build"
      WorkingDirectory="../Deployment/BlueprintGenerationTests/DotnetNew/$(ProjectName)/Test/$(ProjectName).Tests"/>

  </Target>   
    
  <Target Name="run-tests" DependsOnTargets="build-nuget-packages">
    <PropertyGroup>
      <Command>dotnet test -c $(Configuration)</Command>
    </PropertyGroup>
    <Exec Command="$(Command)"
        WorkingDirectory="..\Libraries\test\Amazon.Lambda.AspNetCoreServer.Test"/>
    <Exec Command="$(Command)"
        WorkingDirectory="..\Libraries\test\Amazon.Lambda.Core.Tests"/>
    <Exec Command="$(Command)"
        WorkingDirectory="..\Libraries\test\Amazon.Lambda.Logging.AspNetCore.Tests"/>
    <Exec Command="$(Command)"
        WorkingDirectory="..\Libraries\test\Amazon.Lambda.RuntimeSupport.Tests\Amazon.Lambda.RuntimeSupport.Test"/>
    <Exec Command="$(Command)"
        WorkingDirectory="..\Libraries\test\EventsTests"/>
    <Exec Command="$(Command)"
        WorkingDirectory="..\Libraries\test\TestFunctionFSharp\TestFunctionCSharp"/>
    <Exec Command="$(Command)"
        WorkingDirectory="..\Libraries\test\TestFunctionFSharp\TestFunctionFSharp"/>
  </Target>

  <Target Name="build-nuget-packages" DependsOnTargets="init">

    <Exec Command="dotnet msbuild Libraries.sln /t:Rebuild /p:Configuration=$(Configuration) /p:AssemblyOriginatorKeyFile=$(AssemblyOriginatorKeyFile) /p:SignAssembly=$(SignAssembly)"
        WorkingDirectory="..\Libraries"/>
		
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.APIGatewayEvents"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.ApplicationLoadBalancerEvents"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.AspNetCoreServer"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.CloudWatchEvents"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.CloudWatchLogsEvents"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.CognitoEvents"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.ConfigEvents"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.Core"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.DynamoDBEvents"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.LexEvents"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.KinesisAnalyticsEvents"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.KinesisEvents"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.KinesisFirehoseEvents"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.Logging.AspNetCore"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.PowerShellHost"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.RuntimeSupport"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.S3Events"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.Serialization.Json"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.SimpleEmailEvents"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.SNSEvents"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.SQSEvents"/>
    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Libraries\src\Amazon.Lambda.TestUtilities"/>
  </Target>
  
  <Target Name="build-lambda-test-tool-package" DependsOnTargets="init">
    <Exec Command="dotnet msbuild aws-lambda-test-tool.sln /t:Rebuild /p:Configuration=$(Configuration) /p:AssemblyOriginatorKeyFile=$(AssemblyOriginatorKeyFile) /p:SignAssembly=$(SignAssembly)"
        WorkingDirectory="..\Tools\LambdaTestTool"/>	

    <Exec Command="$(PackCommand)"
        WorkingDirectory="..\Tools\LambdaTestTool\Amazon.Lambda.TestTool"/>		
  </Target>
  
  <Target Name="test-lambda-test-tool" DependsOnTargets="build-lambda-test-tool-package">
    <PropertyGroup>
      <Command>dotnet test</Command>
    </PropertyGroup>
    <Exec Command="$(Command)"
        WorkingDirectory="..\Tools\LambdaTestTool\Amazon.Lambda.TestTool.Tests"/>
  </Target>  
  
    <Target Name="install-lambda-test-tool" DependsOnTargets="build-lambda-test-tool-package">
        <Exec Command="dotnet tool uninstall -g Amazon.Lambda.TestTool-2.1" IgnoreExitCode="true"/>
        <Exec Command="dotnet tool install -g Amazon.Lambda.TestTool-2.1" WorkingDirectory="../Deployment"/>
    </Target>  
  
  
</Project>